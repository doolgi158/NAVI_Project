import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Layout, Typography, Form, Input, InputNumber, Switch, Button, message, Space } from "antd";
import axios from "axios";
import { API_SERVER_HOST } from "@/common/api/naviApi";
import AdminSiderLayout from "../../layout/AdminSiderLayout";

const { Content } = Layout;
const { Title } = Typography;

const AdminRoomFormPage = () => {
    const { accNo, roomNo } = useParams(); // e.g., /admin/rooms/new/:accNo or /admin/rooms/edit/:roomNo
    const navigate = useNavigate();
    const [form] = Form.useForm();
    const [loading, setLoading] = useState(false);
    const isEdit = !!roomNo;

    // ÏàòÏ†ï Î™®ÎìúÏùº Í≤ΩÏö∞ Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    useEffect(() => {
        if (isEdit) {
            // ÏàòÏ†ï Î™®Îìú
            const fetchRoom = async () => {
                try {
                    setLoading(true);
                    const res = await axios.get(`${API_SERVER_HOST}/api/adm/rooms/${roomNo}`);
                    if (res.data.status === 200 && res.data.data) {
                        const room = res.data.data;
                        console.log("üßæ Î∂àÎü¨Ïò® room Îç∞Ïù¥ÌÑ∞:", room);

                        form.setFieldsValue({
                            ...room,
                            hasWifi: !!room.hasWifi,
                            isActive: !!room.isActive,
                        });
                    } else {
                        message.error("Í∞ùÏã§ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
                    }
                } catch {
                    message.error("Í∞ùÏã§ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®");
                } finally {
                    setLoading(false);
                }
            };
            fetchRoom();
        } else {
            // Îì±Î°ù Î™®Îìú
            form.setFieldsValue({
                roomCnt: 4,
                baseCnt: 2,
                maxCnt: 2,
                weekdayFee: 0,
                weekendFee: 0,
                hasWifi: true,
                isActive: true,
            });
        }
    }, [roomNo, isEdit]);

    // Ï†úÏ∂ú Ï≤òÎ¶¨ (Îì±Î°ù/ÏàòÏ†ï Í≥µÏö©)
    const handleSubmit = async (values) => {
        try {
            setLoading(true);

            values.accNo = Number(accNo);

            console.log("üßæ Ï†ÑÏÜ° payload:", values);

            if (isEdit) {
                await axios.put(`${API_SERVER_HOST}/api/adm/rooms/edit/${roomNo}`, values);
                message.success("Í∞ùÏã§ ÏàòÏ†ï ÏôÑÎ£å");
            } else {
                await axios.post(`${API_SERVER_HOST}/api/adm/rooms/new`, values);
                message.success("Í∞ùÏã§ Îì±Î°ù ÏôÑÎ£å");
            }

            navigate("/adm/rooms", { state: { refresh: true } });
        } catch (err) {
            console.error(err);
            message.error("Ï†ÄÏû• Ïã§Ìå®");
        } finally {
            setLoading(false);
        }
    };

    return (
        <Layout style={{ minHeight: "100vh" }}>
            <AdminSiderLayout />
            <Layout className="bg-gray-50">
                <Content className="p-6">
                    <Title level={3}>{isEdit ? "Í∞ùÏã§ ÏàòÏ†ï" : "Í∞ùÏã§ Îì±Î°ù"}</Title>

                    <Form
                        form={form}
                        layout="vertical"
                        onFinish={handleSubmit}
                    >
                        <Form.Item
                            label="Í∞ùÏã§Î™Ö"
                            name="roomName"
                            rules={[{ message: "Í∞ùÏã§Î™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî." }]}
                        >
                            <Input placeholder="Ïòà: ÎçîÎ∏îÎ£∏" />
                        </Form.Item>

                        <Form.Item label="Î©¥Ï†Å(„é°)" name="roomSize">
                            <InputNumber min={0} style={{ width: "100%" }} />
                        </Form.Item>

                        <Form.Item label="Í∞ùÏã§ Ïàò" name="roomCnt">
                            <InputNumber min={1} />
                        </Form.Item>

                        <Space size="large">
                            <Form.Item label="Í∏∞Ï§Ä Ïù∏Ïõê" name="baseCnt">
                                <InputNumber min={1} />
                            </Form.Item>

                            <Form.Item label="ÏµúÎåÄ Ïù∏Ïõê" name="maxCnt">
                                <InputNumber min={1} />
                            </Form.Item>
                        </Space>

                        <Space size="large">
                            <Form.Item label="ÌèâÏùº ÏöîÍ∏à" name="weekdayFee">
                                <InputNumber min={0} />
                            </Form.Item>

                            <Form.Item label="Ï£ºÎßê ÏöîÍ∏à" name="weekendFee">
                                <InputNumber min={0} />
                            </Form.Item>
                        </Space>

                        <Form.Item label="Wi-Fi Ï†úÍ≥µ" name="hasWifi" valuePropName="checked">
                            <Switch checkedChildren="ÏûàÏùå" unCheckedChildren="ÏóÜÏùå" />
                        </Form.Item>

                        <Form.Item label="ÌôúÏÑ±Ìôî Ïó¨Î∂Ä" name="isActive" valuePropName="checked">
                            <Switch checkedChildren="ÌôúÏÑ±" unCheckedChildren="ÎπÑÌôúÏÑ±" />
                        </Form.Item>

                        <Space>
                            <Button type="primary" htmlType="submit" loading={loading}>
                                {isEdit ? "ÏàòÏ†ïÌïòÍ∏∞" : "Îì±Î°ùÌïòÍ∏∞"}
                            </Button>
                            <Button onClick={() => navigate(-1)}>Ï∑®ÏÜå</Button>
                        </Space>
                    </Form>
                </Content>
            </Layout>
        </Layout>
    );
};

export default AdminRoomFormPage;