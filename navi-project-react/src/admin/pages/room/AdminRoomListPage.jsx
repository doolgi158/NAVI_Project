import { Layout, Typography, Input, Button, Table, Space, Modal, Form, InputNumber, Switch, message } from "antd";
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { API_SERVER_HOST } from "@/common/api/naviApi";
import AdminSiderLayout from "../../layout/AdminSiderLayout";
import { useDispatch } from "react-redux";
import { useSelector } from "react-redux";
import { setRoomSearchState } from "@/common/slice/roomSlice";

const { Title } = Typography;
const { Content } = Layout;

const RoomAdminPage = () => {
    const dispatch = useDispatch();
    const savedState = useSelector((state) => state.room);

    const [searchName, setSearchName] = useState(savedState.searchName || "");
    const [selectedAccNo, setSelectedAccNo] = useState(savedState.selectedAccNo);
    const [expandedRowKeys, setExpandedRowKeys] = useState(savedState.expandedRowKeys);
    const [accommodations, setAccommodations] = useState([]);
    const [rooms, setRooms] = useState([]);
    const [loading, setLoading] = useState(false);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingRoom, setEditingRoom] = useState(null);
    const [form] = Form.useForm();
    const navigate = useNavigate();

    // ÌéòÏù¥ÏßÄ Î≥µÍ∑Ä Ïãú ÏûêÎèô Î≥µÏõê
    useEffect(() => {
        if (savedState.selectedAccNo) {
            fetchRooms(savedState.selectedAccNo);
        }
    }, []);

    // ÏàôÏÜå Í≤ÄÏÉâ
    const fetchAccommodations = async () => {
        if (!searchName.trim()) return message.warning("ÏàôÏÜå Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
        setLoading(true);
        try {
            const res = await axios.get(`${API_SERVER_HOST}/api/adm/accommodations/search`, {
                params: { name: searchName },
            });
            console.log("üè® API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:", res.data);
            if (res.data.status === 200 && res.data.data) {
                setAccommodations(res.data.data);
                message.success(`${res.data.data.length}Í∞úÏùò ÏàôÏÜåÎ•º Ï∞æÏïòÏäµÎãàÎã§.`);
            } else {
                message.error("ÏàôÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
            }
        } catch {
            message.error("ÏàôÏÜå Í≤ÄÏÉâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
        } finally {
            setLoading(false);
        }
    };

    // ÏàôÏÜå ÏÑ†ÌÉù ‚Üí Í∞ùÏã§ Î™©Î°ù
    const fetchRooms = async (accNo) => {
        if (!accNo) return;
        setSelectedAccNo(accNo);
        setLoading(true);
        try {
            const res = await axios.get(`${API_SERVER_HOST}/api/adm/rooms/byAcc/${accNo}`);
            if (res.data.status === 200 && res.data.data) {
                setRooms(res.data.data);
            } else {
                message.error("Í∞ùÏã§ÏùÑ Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
            }
        } catch {
            message.error("Í∞ùÏã§ Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
        } finally {
            setLoading(false);
        }
    };

    // Í∞ùÏã§ Ï∂îÍ∞Ä
    const handleAddRoom = () => {
        if (!selectedAccNo) {
            message.warning("Í∞ùÏã§ÏùÑ Ï∂îÍ∞ÄÌï† ÏàôÏÜåÎ•º Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
            return;
        }

        dispatch(setRoomSearchState({
            searchName,
            selectedAccNo,
            expandedRowKeys
        }));

        navigate(`/adm/rooms/new/${selectedAccNo}`);
    };

    // Í∞ùÏã§ ÏàòÏ†ï
    const handleEditRoom = (room) => {
        dispatch(setRoomSearchState({
            searchName,
            selectedAccNo,
            expandedRowKeys
        }));

        console.log("searchName: ", searchName);
        console.log("selectedAccNo: ", selectedAccNo);
        console.log("expandedRowKeys: ", expandedRowKeys);

        navigate(`/adm/rooms/edit/${room.roomNo}`);
    };

    // Í∞ùÏã§ ÏÇ≠Ï†ú
    const handleDeleteRoom = async (roomNo) => {
        Modal.confirm({
            title: "Í∞ùÏã§ ÏÇ≠Ï†ú",
            content: "Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
            okType: "danger",
            onOk: async () => {
                try {
                    await axios.delete(`${API_SERVER_HOST}/api/adm/rooms/${roomNo}`);
                    message.success("ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.");
                    fetchRooms(selectedAccNo);
                } catch {
                    message.error("ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
                }
            },
        });
    };

    const handleSubmit = async () => {
        const values = form.getFieldsValue();

        // ÏÑ†ÌÉùÎêú ÏàôÏÜåÍ∞Ä ÏóÜÏùÑ Í≤ΩÏö∞ Î∞©Ïñ¥ ÏΩîÎìú
        if (!selectedAccNo) {
            message.warning("Í∞ùÏã§ÏùÑ Ï∂îÍ∞ÄÌï† ÏàôÏÜåÎ•º Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
            return;
        }

        // Î∞±ÏóîÎìúÏóêÏÑú Long ÌÉÄÏûÖÏúºÎ°ú Î∞õÍ∏∞ ÎïåÎ¨∏Ïóê Ïà´Ïûê ÌòïÌÉúÎ°ú Î≥ÄÌôò
        values.accNo = Number(selectedAccNo);

        console.log("üßæ Ï†ÑÏÜ° payload:", values);

        try {
            if (editingRoom) {
                await axios.put(`${API_SERVER_HOST}/api/adm/rooms/edit/${editingRoom.roomNo}`, values);
                message.success("ÏàòÏ†ï ÏôÑÎ£å");
            } else {
                await axios.post(`${API_SERVER_HOST}/api/adm/rooms/new`, values);
                message.success("Îì±Î°ù ÏôÑÎ£å");
            }
            setIsModalOpen(false);
            fetchRooms(selectedAccNo);
        } catch {
            message.error("Ï†ÄÏû• Ïã§Ìå®");
        }
    };

    // ÌéòÏù¥ÏßÄ Ïù¥Îèô Ï†Ñ ÏÉÅÌÉú Ï†ÄÏû•
    useEffect(() => {
        dispatch(setRoomSearchState({
            searchName,
            selectedAccNo,
            expandedRowKeys
        }));
    }, [searchName, selectedAccNo, expandedRowKeys]);

    // ÏàôÏÜå ÌÖåÏù¥Î∏î Ïª¨Îüº
    const accColumns = [
        { title: "ÏàôÏÜåÎ™Ö", dataIndex: "title" },
        { title: "ÏàôÏÜå Ïú†Ìòï", dataIndex: "category" },
        { title: "Ï£ºÏÜå", dataIndex: "address" },
        { title: "Ï†ÑÌôîÎ≤àÌò∏", dataIndex: "tel" },
    ];

    // Í∞ùÏã§ ÌÖåÏù¥Î∏î Ïª¨Îüº
    const roomColumns = [
        { title: "Í∞ùÏã§Î™Ö", dataIndex: "roomName" },
        { title: "Î©¥Ï†Å", dataIndex: "roomSize" },
        { title: "Í∏∞Ï§Ä Ïù∏Ïõê", dataIndex: "baseCnt" },
        { title: "ÏµúÎåÄ Ïù∏Ïõê", dataIndex: "maxCnt" },
        { title: "ÌèâÏùº ÏöîÍ∏à", dataIndex: "weekdayFee" },
        { title: "Ï£ºÎßê ÏöîÍ∏à", dataIndex: "weekendFee" },
        { title: "Wi-Fi", dataIndex: "hasWifi", render: (v) => (v ? "O" : "X") },
        {
            title: "Í¥ÄÎ¶¨",
            render: (_, r) => (
                <Space>
                    <Button onClick={() => handleEditRoom(r)}>ÏàòÏ†ï</Button>
                    <Button danger onClick={() => handleDeleteRoom(r.roomNo)}>ÏÇ≠Ï†ú</Button>
                </Space>
            ),
        },
    ];

    // Ìñâ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
    const handleRowClick = (record) => {
        const accKey = record.accNo;
        console.log(record);
        if (!accKey) return;

        if (expandedRowKeys.includes(accKey)) {
            // Ïù¥ÎØ∏ Ïó¥Î†§ ÏûàÏúºÎ©¥ Îã´Í∏∞
            setExpandedRowKeys([]);
            setSelectedAccNo(null);
        } else {
            // ÏÉà Ìñâ Ïó¥Í∏∞
            setExpandedRowKeys([accKey]);
            fetchRooms(accKey);
        }
    };

    return (
        <Layout style={{ minHeight: "100vh" }}>
            <AdminSiderLayout />
            <Layout className="bg-gray-50">
                <Content className="p-6">
                    <Title level={3}>Í∞ùÏã§ Í¥ÄÎ¶¨</Title>

                    <Space className="mb-4">
                        <Input
                            placeholder="ÏàôÏÜå Ïù¥Î¶Ñ ÏûÖÎ†•"
                            value={searchName}
                            onChange={(e) => setSearchName(e.target.value)}
                            style={{ width: 300 }}
                        />
                        <Button type="primary" onClick={fetchAccommodations}>
                            Í≤ÄÏÉâ
                        </Button>
                    </Space>

                    <Table
                        columns={accColumns}
                        dataSource={accommodations}
                        rowKey={(r) => r.accNo || r.accId}
                        loading={loading}
                        pagination={{ pageSize: 5 }}
                        expandable={{
                            expandedRowRender: (record) =>
                                selectedAccNo === (record.accNo || record.accId) && (
                                    <div className="p-4 bg-gray-50 rounded-lg">
                                        <div className="flex justify-between mb-3">
                                            <h3 className="font-semibold">Í∞ùÏã§ Î™©Î°ù</h3>
                                            <Button type="primary" onClick={handleAddRoom}>
                                                Í∞ùÏã§ Ï∂îÍ∞Ä
                                            </Button>
                                        </div>
                                        <Table
                                            columns={roomColumns}
                                            dataSource={rooms}
                                            rowKey="roomNo"
                                            pagination={false}
                                            size="small"
                                            bordered
                                        />
                                    </div>
                                ),
                            expandIcon: () => null,
                            expandedRowKeys,
                            onExpand: (expanded, record) => handleRowClick(record),
                        }}
                        onRow={(record) => ({
                            onClick: () => handleRowClick(record),
                            style: { cursor: "pointer" },
                        })}
                    />

                    {/* Í∞ùÏã§ Îì±Î°ù/ÏàòÏ†ï Î™®Îã¨ */}
                    <Modal
                        open={isModalOpen}
                        title={editingRoom ? "Í∞ùÏã§ ÏàòÏ†ï" : "Í∞ùÏã§ Îì±Î°ù"}
                        okText="Ï†ÄÏû•"
                        cancelText="Ï∑®ÏÜå"
                        onOk={handleSubmit}
                        onCancel={() => setIsModalOpen(false)}
                    >
                        <Form form={form} layout="vertical">
                            <Form.Item label="Í∞ùÏã§Î™Ö" name="roomName" rules={[{ required: true }]}>
                                <Input />
                            </Form.Item>
                            <Form.Item label="Î©¥Ï†Å" name="roomSize">
                                <InputNumber style={{ width: "100%" }} />
                            </Form.Item>
                            <Form.Item label="Í∏∞Ï§Ä Ïù∏Ïõê" name="baseCnt">
                                <InputNumber min={1} />
                            </Form.Item>
                            <Form.Item label="ÏµúÎåÄ Ïù∏Ïõê" name="maxCnt">
                                <InputNumber min={1} />
                            </Form.Item>
                            <Form.Item label="ÌèâÏùº ÏöîÍ∏à" name="weekdayFee">
                                <InputNumber min={0} />
                            </Form.Item>
                            <Form.Item label="Ï£ºÎßê ÏöîÍ∏à" name="weekendFee">
                                <InputNumber min={0} />
                            </Form.Item>
                            <Form.Item label="Wi-Fi" name="hasWifi" valuePropName="checked">
                                <Switch checkedChildren="ÏûàÏùå" unCheckedChildren="ÏóÜÏùå" />
                            </Form.Item>
                        </Form>
                    </Modal>
                </Content>
            </Layout>
        </Layout>
    );
};

export default RoomAdminPage;